<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record model="telegram.command" id="command_cancel">
        <field name="name">/cancel</field>
        <field name="description">Cancel current command</field>
        <field name="sequence" eval="1000"/>
        <field name="group_ids" eval="[]"/>
        <field name="active" eval="False"/>
        <field name="response_template" type="xml">
            <t>Canceled</t>
</field>
    </record>

    <record model="telegram.command" id="telegram.command_start">
        <field name="response_template" type="xml">
<t>
<t t-if="data['type'] == 'choose_language'">
Choose your language
</t>
<t t-if="data['type'] == 'finish'">
Hi! I am a bot to account expenses, income, plan budgets, etc.
To see examples of my reports simply send command /report_example.
To add new record about an expense, send a text message for example "Dinner 200". You are able to remove any test data by sending command /reset. To get full list of available commands send /help.

I'm at your command!
</t>
</t>
        </field>
        <field name="group_ids" eval="[]"/>
    </record>

    <record model="telegram.command" id="command_about">
        <field name="name">/about</field>
        <field name="description">About me</field>
        <field name="sequence" eval="1000"/>
        <field name="group_ids" eval="[]"/>
        <field name="response_template" type="xml">
            <t>
I was created as an example of usage odoo-telegram framework.
https://github.com/it-projects-llc/odoo-telegram

But my master hopes that I could be helpful for folks.
        </t></field>
    </record>

    <record model="telegram.command" id="command_add_record">
        <field name="name">%[0-9]+%</field>
        <field name="description">Add new record</field>
        <field name="sequence" eval="1000"/>
        <field name="group_ids" eval="[]"/>
        <field name="response_code">
partner = env.user.partner_id
callback_data =  telegram.get('response_data') or telegram.get('unknown_response_data')
raw_text = telegram['tmessage'].text
if callback_data:
    record = partner.em_browse_record(callback_data.get('record_id'))
    if callback_data.get('type') == 'new_analytic_liquidity':
        # apply new analytic to previously created record
        analytic_liquidity = partner.em_create_analytic_liquidity(raw_text)
        record.em_update_analytic_liquidity(analytic_liquidity)
    elif callback_data.get('type') == 'new_analytic_payable':
        # apply new analytic to previously created record
        analytic_payable = partner.em_create_analytic_payable(raw_text)
        record.em_update_analytic_payable(analytic_payable)
    else:
        assert not callback_data, "bad callback_data"
else:
    # create new record

    m = re.match(r'(.*?) ([0-9.,]*) ?(.*)', telegram['tmessage'].text)
    text = m.group(1)
    amount = m.group(2)
    currency = m.group(3)

    record = partner.sudo().em_add_new_record(text, amount, currency)

analytic_liquidity = partner.em_record2analytic_liquidity(record)
analytic_payable = partner.em_record2analytic_payable(record)

if not analytic_liquidity:
    data['type'] = 'no_analytic_liquidity'
    callback_data={
        'type': 'new_analytic_liquidity',
        'record_id': record.id,
    }
    buttons = [
        {'text': _('Wallet'), 'callback_data': callback_data},
        {'text': _('Bank Card'), 'callback_data': callback_data},
    ]
    command.keyboard_buttons(options, buttons, row_width=1)
    options['handle_response']['unknown_response'] = callback_data

elif not analytic_payable:

    data['type'] = 'no_analytic_payable'
    callback_data={
        'type': 'new_analytic_payable',
        'record_id': record.id,
    }
    buttons = [
        {'text': _('Grocery'), 'callback_data': callback_data},
        {'text': _('Cafe'), 'callback_data': callback_data},
        {'text': _('Unitility Service'), 'callback_data': callback_data},
        {'text': _('Car Service'), 'callback_data': callback_data},
        {'text': _('Mobile Service'), 'callback_data': callback_data},
    ]
    command.keyboard_buttons(options, buttons, row_width=1)
    options['handle_response']['unknown_response'] = callback_data


data['analytic_liquidity'] = analytic_liquidity
data['analytic_payable'] = analytic_payable
data['record'] = record
        </field>
        <field name="response_template" type="xml">
<t>
    <t t-if="data.get('type') == 'no_analytic_liquidity'">Choose payment way or send name for new one</t>
    <t t-elif="data.get('type') == 'no_analytic_payable'">Choose expense category or send name for new one</t>
    <t t-else="">New record is added! Check or edit it here: /record_<t t-esc="data['record'].id"/></t>
</t>
        </field>
        <field name="active" eval="False"/>
    </record>

    <record model="telegram.command" id="command_record">
        <field name="name">/record_%</field>
        <field name="description">Check/Edit specific record</field>
        <field name="sequence" eval="800"/>
        <field name="universal" eval="False"/>
        <field name="active" eval="False"/>
        <field name="group_ids" eval="[]" />
        <field name="response_code">
ACTION='a'
EDIT_AMOUNT='am'
EDIT_ANALYTIC='an'
EDIT_NOTE='en'
EMPTY_ACTION='n'
RECORD_ID='r'
LINE_ID='l'

callback_data = telegram.get('callback_data') or telegram.get('response_data') or telegram.get('unknown_response_data')
partner = env.user.partner_id
raw_text = telegram.get('tmessage') and telegram.get('tmessage').text
record_id = callback_data and callback_data.get(RECORD_ID) or raw_text and '_' in raw_text and int(raw_text.split('_')[1])
record = partner.em_browse_record(record_id) if record_id else None
data['record'] = record

def edit_button(action, text, record, line_id=None):
    ACTION='a'
    RECORD_ID='r'
    LINE_ID='l'
    icon = emoji.emojize(':pencil:', use_aliases=True)
    button = {
           'text': '%s %s' % (icon, text),
           'callback_data': {
               ACTION: action,
               RECORD_ID: record.id,
           }}
    if line_id:
        button['callback_data'][LINE_ID] = line_id
    return button

def text_button(text, record):
    ACTION='a'
    RECORD_ID='r'
    icon = emoji.emojize(':pencil:', use_aliases=True)
    button = {
           'text': text,
           'callback_data': {
               ACTION: EMPTY_ACTION,
               RECORD_ID: record.id,
           }}
    return button

if not callback_data:
    # handle initial /record_1234 request
    lines = record.em_lines()
    command.inline_keyboard_buttons(options, [
        edit_button(
            EDIT_AMOUNT, 
            _('Amount: %s') % record.amount,
            record),
        edit_button(
            EDIT_NOTE,
            _('Note: %s') % record.narration, 
            record),
    ] + [
        edit_button(
            EDIT_ANALYTIC, 
            label % lines[key]['analytic'],
            record, 
            lines[key]['id'])
        for label, key in [
            (_('Source: %s'), 'from'),
            (_('Destination: %s'), 'to'),
        ]
        if line_data
    ], row_width=1)
    data['type'] = 'show_record'
elif callback_data.get(ACTION) == EMPTY_ACTION:
    # ignore request
    pass

elif telegram.get('callback_data'):
    # handle click on "edit" buttons
    response_data = callback_data.copy()
    options['handle_response'] = {
        'responses': {},
        'unknown_response': response_data,
    }

    if callback_data.get(ACTION) == EDIT_AMOUNT:
        data['type'] = 'edit_amount'
    elif callback_data.get(ACTION) == EDIT_NOTE:
        data['type'] = 'edit_note'
    elif callback_data.get(ACTION) == EDIT_ANALYTIC:
        line_id = callback_data.get(LINE_ID)
        line = partner.em_browse_line(line_id)
        data['type'] = 'edit_from' if line.is_from else 'edit_to'
elif callback_data:
    # handle new value of attributes (either click on Reply Keyboard or manual typing)
    # TODO
    pass
        </field>
        <field name="response_template" type="xml">
<t>
    <t t-if="data['type'] == 'show_record'">Record #<t t-esc="data['record'].id"/>. You can delete it by sending /delete_<t t-esc="data['record'].id"/>.</t>
    <t t-if="data['type'] == 'edit_amount'">Send new Amount or click /cancel</t>
    <t t-if="data['type'] == 'edit_note'">Send new Note or click /cancel</t>
    <t t-if="data['type'] == 'edit_from'">Send new Source, choose from existing or click /cancel</t>
    <t t-if="data['type'] == 'edit_to'">Send new Destination, choose from existing or click /cancel</t>
</t>
        </field>
    </record>

</odoo>
